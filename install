#!/usr/bin/env bash
#
# bootstrap installs things.

declare -A hosts
hosts[mentobook]="all book"
#hosts[some-hostname]="all otherdir"
hostname=$(hostname)

DOTFILES_ROOT=$(pwd -P)

set -e

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst, what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]; then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]; then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]; then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]; then # "false" or empty
    mkdir -p $(dirname $dst)
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_rclone () {
  # error codes
  # 0 - exited without problems
  # 1 - parameters not supported were used or some unexpected error occured
  # 2 - OS not supported by this script
  # 3 - installed version of rclone is up to date
  # 4 - supported unzip tools are not available

  set -e

  #when adding a tool to the list make sure to also add it's corresponding command further in the script
  unzip_tools_list=('unzip' '7z')

  if [ -n "$1" ]; then
      install_beta="beta "
  fi

  #create tmp directory and move to it with macOS compatibility fallback
  tmp_dir=`mktemp -d 2>/dev/null || mktemp -d -t 'rclone-install'`; cd $tmp_dir

  #make sure unzip tool is available and choose one to work with
  set +e
  for tool in ${unzip_tools_list[*]}; do
      trash=`hash $tool 2>>errors`
      if [ "$?" -eq 0 ]; then
          unzip_tool="$tool"
          break
      fi
  done  
  set -e

  # exit if no unzip tools available
  if [ -z "${unzip_tool}" ]; then
      printf "\nNone of the supported tools for extracting zip archives (${unzip_tools_list[*]}) were found. "
      printf "Please install one of them and try again.\n\n"
      exit 4
  fi

  # Make sure we don't create a root owned .config/rclone directory #2127
  export XDG_CONFIG_HOME=config

  #check installed version of rclone to determine if update is necessary
  version=`rclone --version 2>>errors | head -n 1`
  if [ -z "${install_beta}" ]; then
      current_version=`wget -q --show-progress -O - https://downloads.rclone.org/version.txt`
  else
      current_version=`wget -q --show-progress -O - https://beta.rclone.org/version.txt`
  fi

  if [ "$version" = "$current_version" ]; then
      printf "\nThe latest ${install_beta}version of rclone ${version} is already installed.\n\n"
      exit 3
  fi



  #detect the platform
  OS="`uname`"
  case $OS in
    Linux)
      OS='linux'
      ;;
    FreeBSD)
      OS='freebsd'
      ;;
    NetBSD)
      OS='netbsd'
      ;;
    OpenBSD)
      OS='openbsd'
      ;;
    *)
      echo 'OS not supported'
      exit 2
      ;;
  esac

  OS_type="`uname -m`"
  case $OS_type in
    x86_64|amd64)
      OS_type='amd64'
      ;;
    i?86|x86)
      OS_type='386'
      ;;
    arm*)
      OS_type='arm'
      ;;
    aarch64)
      OS_type='arm64'
      ;;
    *)
      echo 'OS type not supported'
      exit 2
      ;;
  esac


  #download and unzip
  if [ -z "${install_beta}" ]; then
      download_link="https://downloads.rclone.org/rclone-current-$OS-$OS_type.zip"
      rclone_zip="rclone-current-$OS-$OS_type.zip"
  else
      download_link="https://beta.rclone.org/rclone-beta-latest-$OS-$OS_type.zip"
      rclone_zip="rclone-beta-latest-$OS-$OS_type.zip"
  fi

  echo $download_link
  wget -q --show-progress $download_link
  unzip_dir="tmp_unzip_dir_for_rclone"
  # there should be an entry in this switch for each element of unzip_tools_list
  case $unzip_tool in
    'unzip')
      unzip -a $rclone_zip -d $unzip_dir
      ;;
    '7z')
      7z x $rclone_zip -o$unzip_dir
      ;;
  esac
      
  cd $unzip_dir/*


  #mounting rclone to enviroment

  case $OS in
    'linux')
      #binary
      cp rclone $HOME/.bin/rclone.new
      chmod 755 $HOME/.bin/rclone.new
      mv $HOME/.bin/rclone.new $HOME/.bin/rclone
      ;;
    'freebsd'|'openbsd'|'netbsd')
      #bin
      cp rclone $HOME/.bin/rclone.new
      mv $HOME/.bin/rclone.new $HOME/.bin/rclone
      ;;
    *)
      echo 'OS not supported'
      exit 2
  esac


  #update version variable post install
  version=`rclone --version 2>>errors | head -n 1`

  printf "\n${version} has successfully installed."
  exit 0
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false
  if test "${hosts[$hostname]+isset}"; then
    for dirs in ${hosts[$hostname]}; do
      for dir in ${dirs[@]}; do
        cycle_dirs $dir
      done;
    done
  else
    cycle_dirs "all"
  fi
}

cycle_dirs () {
  dir=$1
  # echo "$dir"
  for src in $(find -H "$DOTFILES_ROOT/$dir" -type f); do
    dst="$HOME/$(realpath --relative-to=$DOTFILES_ROOT/$dir ${src})"
    # echo "[$DOTFILES_ROOT/$dir]: $src -> $dst"
    link_file "$src" "$dst"
  done;
}

bootstrap () {
  local overwrite= backup= skip= needclone="true"
  ohmyzsh=$HOME/.oh-my-zsh
  if [ -d $ohmyzsh/.git ]; then
    info "Updating Oh My ZSH"
    needclone="false"
    p=$(pwd)
    cd $HOME/.oh-my-zsh
    pulltxt=$(git pull)
    info "$pulltxt"
    cd $p
  elif [ -d $ohmyzsh ] || [ -L $ohmyzsh ]; then
    needclone="true"
    user ".oh-my-zsh already exists, what do you want to do?\n\
    [s]kip, [o]verwrite, [b]ackup?"
    read -n 1 action

    case "$action" in
      o )
        overwrite=true;;
      b )
        backup=true;;
      s )
        skip=true;;
      * )
        ;;
    esac
    if [ "$overwrite" == "true" ]; then
      rm -rf "$ohmyzsh"
      success "removed $ohmyzsh"
    fi

    if [ "$backup" == "true" ]; then
      mv "$ohmyzsh" "${ohmyzsh}.backup"
      success "moved $ohmyzsh to ${ohmyzsh}.backup"
    fi

    if [ "$skip" == "true" ]; then
      success "skipped $ohmyzsh"
    fi
  fi

  if [ "$skip" != "true" ] && [ "$needclone" == "true" ]; then
    info "Cloning Oh My ZSH"
    git clone https://github.com/robbyrussell/oh-my-zsh.git $HOME/.oh-my-zsh
  fi
  
  if [ `basename $SHELL` != "zsh" ]; then
    chsh -s $(which zsh)
  fi
}
if [ -z $1 ]; then
  install_dotfiles
  bootstrap
elif [ "$1" == "rclone" ]; then
  install_rclone
else
  fail "Dont know how to install $1"
fi

echo ''
echo '  All installed!'
echo $1